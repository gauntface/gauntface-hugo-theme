{"version":3,"file":"n-hopin-styleguide-js-colors-grid-async.js","sources":["../../../../src/static/styleguide/js/_friendly-name.ts","../../../../src/static/styleguide/js/_clipboard.ts","../../../../src/static/styleguide/js/n-hopin-styleguide-js-colors-grid-async.ts","../../../../src/static/styleguide/js/_variable-group.ts"],"sourcesContent":["export function friendlyName(varName: string): string {\n  const parts = varName.split(/_|-/g);\n  const words: string[] = [];\n  for (const p of parts) {\n    if (p == '') {\n      continue;\n    }\n\n    words.push(p.charAt(0).toUpperCase()  + p.slice(1).toLowerCase());\n  }\n  return words.join(' ');\n}\n\nexport function friendlyNameFromURL(urlString: string): string {\n  const filenameWithExt = urlString.substring(urlString.lastIndexOf('/')+1);\n  const filename = filenameWithExt.substring(0, filenameWithExt.lastIndexOf('.'));\n  return friendlyName(filename);\n}","export function copyToClipboard(txt: string): boolean {\n  const hiddenElement = document.createElement('div');\n  hiddenElement.textContent = txt;\n  document.body.appendChild(hiddenElement);\n\n  var range = document.createRange();\n  range.selectNode(hiddenElement);\n\n  window.getSelection().empty()\n  window.getSelection().addRange(range);\n\n  let success = false;\n  try {\n    // Now that we've selected the anchor text, execute the copy command\n    success = document.execCommand('copy');\n  } catch(err) {\n    console.log('Error thrown when copying text: ', err);\n  }\n\n  // Remove the selections\n  window.getSelection().removeRange(range);\n  document.body.removeChild(hiddenElement);\n\n  return success;\n}","import {VariableGroup, Variable} from './_variable-group';\nimport {copyToClipboard} from './_clipboard';\n\nconst namespace = 'n-hopin-styleguide-';\nconst COLORS_CONTAINER_SELECTOR = `.${namespace}js-colors-grid`;\n\nconst SWATCH_GROUP_CLASS = `${namespace}c-swatch-group`;\nconst SWATCH_CLASS = `${namespace}c-swatch`;\nconst SWATCH_HEX_CLASS = `${namespace}c-swatch__hex-value`;\nconst SWATCH_VAR_NAME_CLASS = `${namespace}c-swatch__var-value`;\nconst SWATCH_HEX_LIGHT_COLOR = `${namespace}c-swatch__hex--light-color`;\nconst SWATCH_HEX_DARK_COLOR = `${namespace}c-swatch__hex--dark-color`;\nconst SWATCH_COLOR_CLASS = `${namespace}c-swatch__color`;\nconst SWATCH_FOOTER_CLASS = `${namespace}c-swatch__footer`;\nconst SWATCH_NAME_CLASS = `${namespace}c-swatch__name`;\nconst SWATCH_COPY_CLASS = `${namespace}c-swatch__copytext`;\n\nclass ColorPalette extends VariableGroup {\n    constructor() {\n        super(COLORS_CONTAINER_SELECTOR);\n    }\n\n    renderData(variables: Variable[]): HTMLElement[] {\n        const swatchGroup = document.createElement('div');\n        swatchGroup.classList.add(SWATCH_GROUP_CLASS);\n        for (const v of variables) {\n            // Use c.value to get the actual color value\n            const hexValue = document.createElement('span');\n            hexValue.classList.add(SWATCH_HEX_CLASS);\n            hexValue.textContent = v.value;\n    \n            const varName = document.createElement('span');\n            varName.classList.add(SWATCH_VAR_NAME_CLASS);\n            varName.textContent = v.variableName;\n    \n            // TODO: Use specific fonts applied to text instead of black and white\n            const distanceToBlack = this.distance(this.hexToRGB(v.value), this.hexToRGB('#000000'));\n            const distanceToWhite = this.distance(this.hexToRGB(v.value), this.hexToRGB('#FFFFFF'));\n\n            if (distanceToBlack > distanceToWhite) {\n              hexValue.classList.add(SWATCH_HEX_DARK_COLOR);\n              varName.classList.add(SWATCH_HEX_DARK_COLOR);\n            } else {\n              hexValue.classList.add(SWATCH_HEX_LIGHT_COLOR);\n              varName.classList.add(SWATCH_HEX_LIGHT_COLOR);\n            }\n    \n            const swatchColor = document.createElement('div');\n            swatchColor.classList.add(SWATCH_COLOR_CLASS);\n            swatchColor.style.backgroundColor = `var(${v.variableName})`;\n            swatchColor.appendChild(varName);\n            swatchColor.appendChild(hexValue);\n    \n            const swatchFooter = document.createElement('div');\n            swatchFooter.classList.add(SWATCH_FOOTER_CLASS);\n    \n            const colorName = document.createElement('span');\n            colorName.classList.add(SWATCH_NAME_CLASS);\n            colorName.textContent = v.prettyName;\n    \n            const copyText = document.createElement('div');\n            copyText.classList.add(SWATCH_COPY_CLASS);\n            copyText.textContent = 'Copy';\n    \n            swatchFooter.appendChild(colorName);\n            swatchFooter.appendChild(copyText);\n    \n            const swatch = document.createElement('div');\n            swatch.classList.add(SWATCH_CLASS);\n            swatch.appendChild(swatchColor);\n            swatch.appendChild(swatchFooter);\n            swatch.addEventListener('click', (e) => {\n              e.preventDefault();\n              // TODO: Disable it such that you can't copy\n              // multiple times.\n              const success = copyToClipboard(v.variableName);\n              if (success) {\n                copyText.textContent = 'Copied';\n                setTimeout(() => {\n                  copyText.textContent = 'Copy';\n                }, 1000);\n              }\n            });\n    \n            swatchGroup.appendChild(swatch);\n        }\n        return [swatchGroup];\n    }\n\n    hexToRGB(colorValue: string): RGBColor {\n        const hexRegex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n        let result = hexRegex.exec(colorValue.trim());\n        if (!result) {\n          // Try 3 hex\n          const shortHexRegex = /^#?([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i;\n          result = shortHexRegex.exec(colorValue.trim());\n          if (!result) {\n            const rgbRegex = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+).*\\)$/i;\n            result = rgbRegex.exec(colorValue.trim());\n            if (!result) {\n              throw new Error(`Unable to parse hex string '${colorValue}'`);\n            }\n          }\n          result[1] = `${result[1]}${result[1]}`;\n          result[2] = `${result[2]}${result[2]}`;\n          result[3] = `${result[3]}${result[3]}`;\n        }\n        return {\n          Red: parseInt(result[1], 16),\n          Green: parseInt(result[2], 16),\n          Blue: parseInt(result[3], 16),\n        }\n      }\n    \n      distance(c1: RGBColor, c2: RGBColor): number {\n        const d = Math.pow((c1.Red - c2.Red), 2) +\n        Math.pow((c1.Green - c2.Green), 2) +\n        Math.pow((c1.Blue - c2.Blue), 2);\n        return Math.sqrt(d);\n      }\n}\n\nwindow.addEventListener('load', function() {\n  if (!document.querySelector(COLORS_CONTAINER_SELECTOR)) {\n    return\n  }\n\n  new ColorPalette().render();\n});\n\ninterface RGBColor {\n    Red: number;\n    Green: number;\n    Blue: number;\n  }","import { friendlyName, friendlyNameFromURL } from \"./_friendly-name\";\n\nconst namespace = 'n-hopin-styleguide-';\nconst GROUP_CONTAINER_CLASS = `${namespace}c-variable-group`;\nconst GROUP_TITLE_CLASS = `${namespace}c-variable-group__title`;\n\nexport abstract class VariableGroup {\n    constructor(private containerSelector: string) {}\n\n    getGroups(): Group[] {\n        const groups: { [key: string]: Group; } = {};\n        for (const s of document.styleSheets) {\n            try {\n                const element = s.ownerNode as HTMLElement;\n                if (!element.classList.contains('n-hopin-styleguide-js-load-static-css')) {\n                    continue;\n                }\n                if (!s.href) {\n                    continue;\n                }\n\n                if (groups[s.href]) {\n                  continue;\n                }\n\n                const group: Group = {\n                    prettyName: friendlyNameFromURL(s.href),\n                    href: s.href,\n                    variables: [],\n                };\n\n                const cssStylesheet = s as CSSStyleSheet;\n                for (const r of cssStylesheet.cssRules) {\n                    const cssStyleRule = r as {\n                        styleMap?: StyleMap\n                    };\n                    if (cssStyleRule['styleMap']) {\n                        const map = cssStyleRule['styleMap'];\n                        for (const e of map.entries()) {\n                            // The format of e is [\"<param name>\", [[\"<value>\"]]]\n                            const name = e[0] as string;\n                            if (name.indexOf('--') === 0) {\n                                let unparsedValue = e[1][0] as CSSUnparsedValue;\n                                group.variables.push({\n                                    prettyName: friendlyName(name),\n                                    variableName: name,\n                                    value: unparsedValue.toString().trim(),\n                                });\n                            }\n                        }\n                    }\n                }\n                groups[s.href] = group;\n            } catch (err) {\n                // External stylesheets will not be accessible from JavaScript\n                // in which case this error will be thrown.\n                console.error(`Unable to read styles for ${s.href}`, err);\n            }\n        }\n        return Object.values(groups);\n    }\n\n    render() {\n        const containerElement = document.querySelector(this.containerSelector);\n        if (!containerElement) {\n            console.warn(`Unable to find container with selector ${this.containerSelector}`)\n            return;\n        }\n\n        const groups = this.getGroups();\n        console.log(`Rendering the following groups:`, groups);\n        for (const g of groups) {\n            const groupContainer = document.createElement('section');\n            groupContainer.classList.add(GROUP_CONTAINER_CLASS);\n\n            if (g.prettyName) {\n                const title = document.createElement('h2');\n                title.classList.add(GROUP_TITLE_CLASS);\n                title.textContent = g.prettyName;\n                groupContainer.appendChild(title);\n            }\n\n            const elements = this.renderData(g.variables);\n            for (const e of elements) {\n                groupContainer.appendChild(e);\n            }\n            containerElement.appendChild(groupContainer);\n        } \n    }\n\n    abstract renderData(variables: Variable[]): HTMLElement[];\n} \n\ninterface Group {\n    prettyName: string|null;\n    href: string;\n    variables: Variable[];\n}\n\nexport interface Variable {\n    prettyName: string|null;\n    variableName: string;\n    value: string;\n}\n\ninterface StyleMap {\n    entries: () => Array<string|Array<string>>;\n}"],"names":["friendlyName","varName","parts","split","words","p","push","charAt","toUpperCase","slice","toLowerCase","join","friendlyNameFromURL","urlString","filenameWithExt","substring","lastIndexOf","copyToClipboard","txt","hiddenElement","document","createElement","textContent","body","appendChild","range","createRange","selectNode","window","getSelection","empty","addRange","success","execCommand","err","console","log","removeRange","removeChild","namespace","COLORS_CONTAINER_SELECTOR","SWATCH_GROUP_CLASS","SWATCH_CLASS","SWATCH_HEX_CLASS","SWATCH_VAR_NAME_CLASS","SWATCH_HEX_LIGHT_COLOR","SWATCH_HEX_DARK_COLOR","SWATCH_COLOR_CLASS","SWATCH_FOOTER_CLASS","SWATCH_NAME_CLASS","SWATCH_COPY_CLASS","ColorPalette","[object Object]","containerSelector","this","groups","s","styleSheets","ownerNode","classList","contains","href","group","prettyName","variables","cssStylesheet","r","cssRules","cssStyleRule","map","e","entries","name","indexOf","unparsedValue","variableName","value","toString","trim","error","Object","values","containerElement","querySelector","warn","getGroups","g","groupContainer","add","title","elements","renderData","super","swatchGroup","v","hexValue","distance","hexToRGB","swatchColor","style","backgroundColor","swatchFooter","colorName","copyText","swatch","addEventListener","preventDefault","setTimeout","colorValue","result","exec","Error","Red","parseInt","Green","Blue","c1","c2","d","Math","pow","sqrt","render"],"mappings":"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"}